name: CI
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        # Checks out the code from the repository

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 19.8.1
        # Sets up the Node.js environment with the specified version

      - name: Install dependencies
        run: npm ci
        # Installs project dependencies using npm

      - name: Run unit tests
        run: npm run test
        # Executes the test command to run unit tests

      - name: Copy .env.example to .env
        run: cp .env.example .env
        # Copy .env.example to .env
      - name: Set up MongoDB
        uses: supercharge/mongodb-github-action@1.8.0
        with:
          mongodb-version: 6.0
        # Set up MongoDB version 6.0

      - name: Run e2e tests
        run: npm run test:e2e
        # Executes the test command to run e2e tests
  trigger-circleci:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger deploy on circle
        id: TriggerCircleId
        uses: circleci/trigger_circleci_pipeline@v1.0.5
        env:
          CCI_TOKEN: ${{ secrets.CCI_TOKEN }}
  Deploy-Production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18.15.0
        # Sets up the Node.js environment with the specified version

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
